   # Custom Non-Standalone Function For Reading Subaction Event Data
        patchInsertAsm "801510e0":
            cmpwi r4, 343
            %`beq-`(OriginalExit)

            # inputs
            # r3 = ExtHit struct ptr
            # r4 = Hit struct ptr
            # r5 = ExtItem/FighterDataOffset
            # r6 = Hit struct offset
            # r7 = Hit struct size
            # r8 = New Hit Struct Offset
            # r9 = hitboxext type
            # r30 = item/fighter data
            # r27 = item/fighter gobj
            # r29 = command info
            ParseBegin_Prolog:
                # prolog
                mflr r0
                stw r0, 0x4(sp)
                stwu sp, -0x50(sp)
                stw r31, 0x4C(sp)
                stw r26, 0x48(sp)
                stw r25, 0x44(sp)
                stw r24, 0x40(sp)
                stw r23, 0x3C(sp)
                stw r22, 0x38(sp)
                stw r21, 0x34(sp)
                stw r20, 0x30(sp)
                stw r19, 0x2C(sp)
            
                lwz r31, 0x8(r29) # current subaction ptr
                mr r26, r5
                mr r25, r6
                mr r24, r7
                mr r23, r8
                li r22, 0 # loop counter
                li r21, 0 # used to check if applying to all active hitboxes or not
                li r20, 0
                li r19, 0 # ExtHit template used for copying

                lbz r0, 0x8(r31)
                cmpwi r0, 0xEF
                bne ParseBegin

                li r20, 1

                ParseBegin:
                    # if givenExtHitPtr != null && givenExtHitPtr != null
                    # just parse the event data and exit
                    cmplwi r3, 0
                    beq ParseHeader
                    cmplwi r4, 0
                    bne ParseEventData

                ParseHeader:
                    lbz r0, 0x1(r31) # load first byte
                    rlwinm r3, r0, 27, 29, 31 # 0xE0 hitbox id/type
                    %`rlwinm.`(r21, r0, 0, 27, 27) # 0x10, apply to all active hitboxes
                    beq GetHitStructPtrs

                # find all active hitboxes
                FindActiveHitboxes:
                    li r3, 0 # start at hitbox 0
                    b GetHitStructPtrs
                    FindActiveHitboxes_Check:
                        
                        # skip non-active hitboxes
                        lwz r0, 0(r4)
                        cmpwi r0, 0
                        beq FindActiveHitboxes_Next
                        
                        # get a template ExtHit if it doesn't exist
                        cmplwi r19, 0
                        beq ParseEventData
                        
                        # if there is a template ExtHit, we will copy vars to the next ExtHit
                        FindActiveHitboxes_Copy:
                            li r0, {((sizeof(SpecialHitNormal) + sizeof(SpecialHitAdvanced)) / sizeof(uint32)).uint32} # TODO wrong copy number
                            subi r5, r19, 4
                            subi r6, r3, 4

                        ExtHitCopy_Init:
                            mtctr r0
                            ExtHitCopy:
                                lwzu r0, 0x4(r5)
                                stwu r0, 0x4(r6)
                                %`bdnz+`(ExtHitCopy)
                                # run any after copy functions
                                # TODO better way for advanced...
                                cmpwi r20, 0
                                beq ParseEventData_SetNormalHitboxValues

                    FindActiveHitboxes_Next:
                        addi r22, r22, 1
                        cmplwi r22, {OldHitboxCount}
                        bne Advance # != 4, continue
                        # switch to using the new hit offset (for ids >= 4)
                        add r4, r4, r23
                        Advance:
                            cmplwi r22, {NewHitboxCount}
                            add r4, r4, r24 # next Ft/ItHit struct
                            addi r3, r3, {sizeof(SpecialHit)} # next ExtHit struct
                            blt FindActiveHitboxes_Check

                b Exit

                GetHitStructPtrs:
                    # inputs
                    # r3 = hitbox id
                    # outputs
                    # r3 = ExtHit Ptr
                    # r4 = Hit ptr
                    mullw r4, r3, r24
                    cmplwi r3, {OldHitboxCount}
                    blt CalcNormal
                    add r4, r4, r23
                    CalcNormal:
                        add r4, r4, r25
                        add r4, r30, r4                
                    # calculate ExtHit ptr offset in Ft/It data
                    mulli r3, r3, {sizeof(SpecialHit)}
                    add r3, r3, r26
                    add r3, r30, r3

                    cmpwi r21, 0
                    bne FindActiveHitboxes_Check

                ParseEventData:
                    # inputs
                    # r3 = ExtHit ptr
                    # r4 = Hit ptr
                    mr r19, r3 # set ExtHit template

                    ParseEventData_Normal:

                        # load 0.01 to use for multipliying our multipliers
                        lwz r5, -0x514C(r13) # static vars??
                        lfs f1, 0xF4(r5) # load 0.01 into f1
                        # hitlag & SDI multipliers
                        lhz r5, 0x1(r31)
                        rlwinm r5, r5, 0, 0xFFF # 0xFFF, load hitlag multiplier
                        sth r5, 0x24(sp)
                        lhz r5, 0x3(r31)
                        rlwinm r5, r5, 28, 0xFFF # load SDI multiplier
                        sth r5, 0x26(sp)
                        psq_l f0, 0x24(sp), 0, 5 # load both hitlag & sdi multipliers into f0 (ps0 = hitlag multi, ps1 = sdi multi)
                        ps_mul f0, f1, f0 # multiply both hitlag & sdi multipliers by f1 = 0.01
                        psq_st f0, {extHitNormOff(hitlagMultiplier)}(r3), 0, 7 # store calculated hitlag & sdi multipliers next to each other

                        # read shieldstun multiplier & hitstun modifier
                        lwz r5, -0x514C(r13)
                        psq_l f1, 0xF4(r5), 1, 7 # load 0.01 in f1(ps0), 1.0 in f1(ps1)
                        lhz r5, 0x4(r31)
                        rlwinm r5, r5, 0, 0xFFF # load shieldstun multiplier
                        sth r5, 0x24(sp)
                        lbz r5, 0x6(r31) # read hitstun modifier byte
                        slwi r5, r5, 24
                        srawi r5, r5, 24
                        sth r5, 0x26(sp)
                        psq_l f0, 0x24(sp), 0, 5 # load shieldstun multi in f0(ps0), hitstun mod in f0(ps1) ]#
                        ps_mul f0, f1, f0 # shieldstun multi * 0.01, hitstun mod * 1.00
                        psq_st f0, {extHitNormOff(shieldstunMultiplier)}(r3), 0, 7 # store results next to each other
                        # read isSetWeight & Flippy bits & store it
                        lbz r0, 0x7(r31)
                        stb r0, {extHitNormOff(hitFlags)}(r3)
                        %`rlwinm.`(r0, r0, 0, flag(hfDisableHitlag))
                        beq ParseEventData_SetNormalHitboxValues

                        # if DisableHitlag flag is true, set the hitlag multiplier to 0
                        li r0, 0
                        stw r0, {extHitNormOff(hitlagMultiplier)}(r3)
 
                        ParseEventData_SetNormalHitboxValues:
                            # r4 = ft/it hit
                            lbz r0, 0x7(r31)
                            %`rlwinm.`(r0, r0, 0, flag(hfNoStale))
                            beq ParseEventData_Normal_CheckExtended
                            # if no staling == true, set Ft/It hit's damage_f to its base damage
                            lwz r0, 0x8(r4)
                            sth r0, 0x24(sp)
                            psq_l f1, 0x24(sp), 1, 5
                            stfs f1, 0xC(r4)

                        ParseEventData_Normal_CheckExtended:
                            cmpwi r20, 0
                            beq ParseEventData_End

                    ParseEventData_Advanced:
                        addi r31, r31, 0x8
                        lbz r0, 0x7(r31)
                        stb r0, {extHitAdvOff(hitAdvFlags)}(r3)
                        subi r31, r31, 0x8

                    ParseEventData_End:
                        cmpwi r21, 0
                        bne FindActiveHitboxes_Next

                Exit:
                    # advance script
                    addi r31, r31, 0x8

                    cmpwi r20, 0        
                    beq Exit_Epilog

                    Exit_Advanced:
                        addi r31, r31, 0x8

                    Exit_Epilog:
                        stw r31, 0x8(r29)
                        lwz r0, 0x54(sp)
                        lwz r31, 0x4C(sp)
                        lwz r26, 0x48(sp)
                        lwz r25, 0x44(sp)
                        lwz r24, 0x40(sp)
                        lwz r23, 0x3C(sp)
                        lwz r22, 0x38(sp)
                        lwz r21, 0x34(sp)
                        lwz r20, 0x30(sp)
                        lwz r19, 0x2C(sp)
                        addi sp, sp, 0x50
                        mtlr r0
                        blr

            OriginalExit:
                fmr f3, f1
